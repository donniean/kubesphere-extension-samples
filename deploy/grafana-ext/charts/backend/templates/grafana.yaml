---
apiVersion: v1
kind: Namespace
metadata:
  name: monitoring


---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: node-exporter
  namespace: monitoring
  labels:
    name: node-exporter
spec:
  selector:
    matchLabels:
      name: node-exporter
  template:
    metadata:
      labels:
        name: node-exporter
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9100"
    spec:
      hostPID: true
      hostIPC: true
      hostNetwork: true
      containers:
        - ports:
            - containerPort: 9100
              protocol: TCP
              name: node-exporter
#          resources:
#            requests:
#              cpu: 0.15
          securityContext:
            privileged: true
          image: prom/node-exporter:v1.3.1
          args:
            - --path.procfs
            - /host/proc
            - --path.sysfs
            - /host/sys
            - --collector.filesystem.ignored-mount-points
            - '"^/(sys|proc|dev|host|etc)($|/)"'
          name: node-exporter
          volumeMounts:
            - name: dev
              mountPath: /host/dev
            - name: proc
              mountPath: /host/proc
            - name: sys
              mountPath: /host/sys
            - name: rootfs
              mountPath: /rootfs
      volumes:
        - name: proc
          hostPath:
            path: /proc
        - name: dev
          hostPath:
            path: /dev
        - name: sys
          hostPath:
            path: /sys
        - name: rootfs
          hostPath:
            path: /



---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval:     15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.
      evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.
    # Alertmanager configuration
    alerting:
      alertmanagers:
      - static_configs:
        - targets:
          # - alertmanager:9093
    # Load rules once and periodically evaluate them according to the global 'evaluation_interval'.
    rule_files:
      # - "first_rules.yml"
      # - "second_rules.yml"
    # A scrape configuration containing exactly one endpoint to scrape:
    # Here it's Prometheus itself.
    scrape_configs:
      - job_name: 'prometheus'
        # metrics_path defaults to '/metrics'
        # scheme defaults to 'http'.
        static_configs:
        - targets: ['localhost:9090']
      - job_name: 'node-exporter'
        # static_configs:
        # - targets: ['node-exporter.monitoring.svc:9100']
        kubernetes_sd_configs:
        - role: pod
          namespaces:
            names:
              - monitoring
          selectors:
            - role: pod
              label: "name=node-exporter"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: monitoring
  labels:
    app: prometheus
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
    spec:
      containers:
        - name: prometheus
          image: prom/prometheus:v2.33.0
          imagePullPolicy: IfNotPresent
          args:
            - '--storage.tsdb.retention.time=30m'
            - '--storage.tsdb.retention.size=128MB'
            - '--storage.tsdb.path=/prometheus'
            - '--config.file=/etc/prometheus/prometheus.yml'
          command:
            - /bin/prometheus
          ports:
            - name: web
              containerPort: 9090
          volumeMounts:
            - name: config-volume
              mountPath: /etc/prometheus
            - name: data
              mountPath: /prometheus
      restartPolicy: Always
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
        - name: config-volume
          configMap:
            name: prometheus-config
        - name: data
          emptyDir: {}


---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: grafana
  name: grafana
  namespace: monitoring
spec:
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      securityContext:
        fsGroup: 472
        supplementalGroups:
          - 0
      containers:
        - name: grafana
          image: grafana/grafana:8.4.4
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 3000
              name: http-grafana
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /robots.txt
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 2
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 3000
            timeoutSeconds: 1
          env:
            - name: GF_SECURITY_ALLOW_EMBEDDING
              value: 'true'
            - name: GF_SERVER_DOMAIN
              value: 'localhost'
            - name: GF_SERVER_ROOT_URL
              value: '%(protocol)s://%(domain)s:%(http_port)s/proxy/grafana'
            - name: GF_SERVER_SERVE_FROM_SUB_PATH
              value: 'true'
            - name: GF_AUTH_PROXY_ENABLED
              value: 'true'
            # - name: GF_SECURITY_ADMIN_USER
            #   value: admin
          volumeMounts:
            - mountPath: /var/lib/grafana
              name: grafana-pv
            - mountPath: /grafana-dashboard-definitions/0/nodes
              name: grafana-dashboard-nodes
              readOnly: false
            - mountPath: /etc/grafana/provisioning/dashboards
              name: grafana-dashboards
              readOnly: false
            - mountPath: /etc/grafana/provisioning/datasources
              name: grafana-datasources
              readOnly: false
      volumes:
        - name: grafana-pv
          emptyDir: {}
        - configMap:
            name: grafana-dashboard-nodes
          name: grafana-dashboard-nodes
        - name: grafana-datasources
          secret:
            secretName: grafana-datasources
        - configMap:
            name: grafana-dashboards
          name: grafana-dashboards



---
apiVersion: v1
data:
  dashboards.yaml: |-
    apiVersion: 1
    providers:
    - folder: Default
      folderUid: ''
      name: '0'
      options:
        path: "/grafana-dashboard-definitions/0"
      orgId: 1
      type: file
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/component: grafana
    app.kubernetes.io/name: grafana
  name: grafana-dashboards
  namespace: monitoring

---
apiVersion: v1
kind: Secret
metadata:
  labels:
    app.kubernetes.io/component: grafana
    app.kubernetes.io/name: grafana
  name: grafana-datasources
  namespace: monitoring
stringData:
  datasources.yaml: |-
    apiVersion: 1
    datasources:
    - access: proxy
      editable: false
      name: prometheus
      orgId: 1
      type: prometheus
      url: http://prometheus.monitoring.svc:9090
      version: 1
type: Opaque

---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: monitoring
spec:
  ports:
    - port: 80
      protocol: TCP
      targetPort: http-grafana
  selector:
    app: grafana
  sessionAffinity: None
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: monitoring
spec:
  selector:
    app: prometheus
  type: ClusterIP
  ports:
    - name: prometheus
      protocol: TCP
      port: 9090


---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
rules:
  - apiGroups: [""]
    resources:
      - nodes
      - nodes/proxy
      - services
      - endpoints
      - pods
    verbs: ["get", "list", "watch"]
  - apiGroups:
      - extensions
    resources:
      - ingresses
    verbs: ["get", "list", "watch"]
  - nonResourceURLs: ["/metrics"]
    verbs: ["get"]

---
#apiVersion: v1
#kind: ServiceAccount
#metadata:
#  name: default
#  namespace: monitoring

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
  - kind: ServiceAccount
    name: default
    namespace: monitoring



---
apiVersion: v1
data:
  nodes.json: |-
    {
    	"__inputs": [],
    	"__requires": [],
    	"annotations": {
    		"list": []
    	},
    	"editable": false,
    	"gnetId": null,
    	"graphTooltip": 1,
    	"hideControls": false,
    	"id": null,
    	"links": [],
    	"refresh": "30s",
    	"rows": [
    		{
    			"collapse": false,
    			"collapsed": false,
    			"panels": [{
    					"aliasColors": {},
    					"bars": false,
    					"dashLength": 10,
    					"dashes": false,
    					"datasource": "$datasource",
    					"fill": 1,
    					"fillGradient": 0,
    					"gridPos": {},
    					"id": 4,
    					"legend": {
    						"alignAsTable": false,
    						"avg": false,
    						"current": false,
    						"max": false,
    						"min": false,
    						"rightSide": false,
    						"show": true,
    						"sideWidth": null,
    						"total": false,
    						"values": false
    					},
    					"lines": true,
    					"linewidth": 1,
    					"links": [],
    					"nullPointMode": "null",
    					"percentage": false,
    					"pointradius": 5,
    					"points": false,
    					"renderer": "flot",
    					"repeat": null,
    					"seriesOverrides": [],
    					"spaceLength": 10,
    					"span": 9,
    					"stack": true,
    					"steppedLine": false,
    					"targets": [{
    							"expr": "(\n  node_memory_MemTotal_bytes{job=\"node-exporter\", instance=\"$instance\"}\n-\n  node_memory_MemFree_bytes{job=\"node-exporter\", instance=\"$instance\"}\n-\n  node_memory_Buffers_bytes{job=\"node-exporter\", instance=\"$instance\"}\n-\n  node_memory_Cached_bytes{job=\"node-exporter\", instance=\"$instance\"}\n)\n",
    							"format": "time_series",
    							"intervalFactor": 2,
    							"legendFormat": "memory used",
    							"refId": "A"
    						},
    						{
    							"expr": "node_memory_Buffers_bytes{job=\"node-exporter\", instance=\"$instance\"}",
    							"format": "time_series",
    							"intervalFactor": 2,
    							"legendFormat": "memory buffers",
    							"refId": "B"
    						},
    						{
    							"expr": "node_memory_Cached_bytes{job=\"node-exporter\", instance=\"$instance\"}",
    							"format": "time_series",
    							"intervalFactor": 2,
    							"legendFormat": "memory cached",
    							"refId": "C"
    						},
    						{
    							"expr": "node_memory_MemFree_bytes{job=\"node-exporter\", instance=\"$instance\"}",
    							"format": "time_series",
    							"intervalFactor": 2,
    							"legendFormat": "memory free",
    							"refId": "D"
    						}
    					],
    					"thresholds": [],
    					"timeFrom": null,
    					"timeShift": null,
    					"title": "Memory Usage",
    					"tooltip": {
    						"shared": true,
    						"sort": 0,
    						"value_type": "individual"
    					},
    					"type": "graph",
    					"xaxis": {
    						"buckets": null,
    						"mode": "time",
    						"name": null,
    						"show": true,
    						"values": []
    					},
    					"yaxes": [{
    							"format": "bytes",
    							"label": null,
    							"logBase": 1,
    							"max": null,
    							"min": 0,
    							"show": true
    						},
    						{
    							"format": "bytes",
    							"label": null,
    							"logBase": 1,
    							"max": null,
    							"min": 0,
    							"show": true
    						}
    					]
    				},
    				{
    					"datasource": "$datasource",
    					"fieldConfig": {
    						"defaults": {
    							"max": 100,
    							"min": 0,
    							"thresholds": {
    								"mode": "absolute",
    								"steps": [{
    										"color": "rgba(50, 172, 45, 0.97)"
    									},
    									{
    										"color": "rgba(237, 129, 40, 0.89)",
    										"value": 80
    									},
    									{
    										"color": "rgba(245, 54, 54, 0.9)",
    										"value": 90
    									}
    								]
    							},
    							"unit": "percent"
    						}
    					},
    					"gridPos": {},
    					"id": 5,
    					"span": 3,
    					"targets": [{
    						"expr": "100 -\n(\n  avg(node_memory_MemAvailable_bytes{job=\"node-exporter\", instance=\"$instance\"}) /\n  avg(node_memory_MemTotal_bytes{job=\"node-exporter\", instance=\"$instance\"})\n* 100\n)\n",
    						"format": "time_series",
    						"intervalFactor": 2,
    						"legendFormat": ""
    					}],
    					"title": "Memory Usage",
    					"transparent": false,
    					"type": "gauge"
    				}
    			],
    			"repeat": null,
    			"repeatIteration": null,
    			"repeatRowId": null,
    			"showTitle": true,
    			"title": "Memory",
    			"titleSize": "h6",
    			"type": "row"
    		}
    	],
    	"schemaVersion": 14,
    	"style": "dark",
    	"tags": [
    		"node-exporter-mixin"
    	],
    	"templating": {
    		"list": [{
    				"current": {
    					"text": "default",
    					"value": "default"
    				},
    				"hide": 0,
    				"label": "Data Source",
    				"name": "datasource",
    				"options": [],
    				"query": "prometheus",
    				"refresh": 1,
    				"regex": "",
    				"type": "datasource"
    			},
    			{
    				"allValue": null,
    				"current": {},
    				"datasource": "$datasource",
    				"hide": 0,
    				"includeAll": false,
    				"label": "Instance",
    				"multi": false,
    				"name": "instance",
    				"options": [],
    				"query": "label_values(node_uname_info{job=\"node-exporter\", sysname!=\"Darwin\"}, instance)",
    				"refresh": 2,
    				"regex": "",
    				"sort": 0,
    				"tagValuesQuery": "",
    				"tags": [],
    				"tagsQuery": "",
    				"type": "query",
    				"useTags": false
    			}
    		]
    	},
    	"time": {
    		"from": "now-1h",
    		"to": "now"
    	},
    	"timepicker": {
    		"refresh_intervals": [
    			"5s",
    			"10s",
    			"30s",
    			"1m",
    			"5m",
    			"15m",
    			"30m",
    			"1h",
    			"2h",
    			"1d"
    		],
    		"time_options": [
    			"5m",
    			"15m",
    			"1h",
    			"6h",
    			"12h",
    			"24h",
    			"2d",
    			"7d",
    			"30d"
    		]
    	},
    	"timezone": "utc",
    	"title": "Node Exporter / Nodes",
    	"version": 0
    }
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/component: grafana
    app.kubernetes.io/name: grafana
  name: grafana-dashboard-nodes
  namespace: monitoring